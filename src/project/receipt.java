/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project;

import com.sun.glass.events.KeyEvent;
import static java.awt.FlowLayout.RIGHT;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Jenny May
 */
public class receipt extends javax.swing.JFrame {

   

    int total,   cost, qty;
    String order;
    int num;
    String all;
    String Specific_order;
    
    
   
    /**
     * Creates new form receipt
     */
    public receipt() {
        
        initComponents();
        data();
        ref();
        _order.hide();
        
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        exit = new javax.swing.JButton();
        choice = new javax.swing.JPanel();
        menu2 = new javax.swing.JCheckBox();
        menu3 = new javax.swing.JCheckBox();
        menu5 = new javax.swing.JCheckBox();
        menu4 = new javax.swing.JCheckBox();
        menu6 = new javax.swing.JCheckBox();
        menu7 = new javax.swing.JCheckBox();
        menu1 = new javax.swing.JCheckBox();
        num_solo = new javax.swing.JTextField();
        num_fries = new javax.swing.JTextField();
        num_spaghetti = new javax.swing.JTextField();
        num_burger = new javax.swing.JTextField();
        num_set = new javax.swing.JTextField();
        num_mango = new javax.swing.JTextField();
        num_palabok = new javax.swing.JTextField();
        reset = new javax.swing.JButton();
        btn_total = new javax.swing.JButton();
        menu = new javax.swing.JButton();
        copy = new javax.swing.JPanel();
        txt_total = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        _order = new javax.swing.JLabel();
        delete = new javax.swing.JButton();
        number = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(204, 0, 0));
        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(204, 0, 0)));
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel1.setPreferredSize(new java.awt.Dimension(750, 535));

        exit.setBackground(new java.awt.Color(255, 51, 51));
        exit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        exit.setText("X");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        choice.setBackground(new java.awt.Color(255, 255, 255));
        choice.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51), 2));

        menu2.setBackground(new java.awt.Color(255, 255, 255));
        menu2.setFont(new java.awt.Font("Tekton Pro", 0, 18)); // NOI18N
        menu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu2ActionPerformed(evt);
            }
        });

        menu3.setBackground(new java.awt.Color(255, 255, 255));
        menu3.setFont(new java.awt.Font("Tekton Pro", 0, 18)); // NOI18N
        menu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu3ActionPerformed(evt);
            }
        });

        menu5.setBackground(new java.awt.Color(255, 255, 255));
        menu5.setFont(new java.awt.Font("Tekton Pro", 0, 18)); // NOI18N
        menu5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu5ActionPerformed(evt);
            }
        });

        menu4.setBackground(new java.awt.Color(255, 255, 255));
        menu4.setFont(new java.awt.Font("Tekton Pro", 0, 18)); // NOI18N
        menu4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu4ActionPerformed(evt);
            }
        });

        menu6.setBackground(new java.awt.Color(255, 255, 255));
        menu6.setFont(new java.awt.Font("Tekton Pro", 0, 18)); // NOI18N
        menu6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu6ActionPerformed(evt);
            }
        });

        menu7.setBackground(new java.awt.Color(255, 255, 255));
        menu7.setFont(new java.awt.Font("Tekton Pro", 0, 18)); // NOI18N
        menu7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu7ActionPerformed(evt);
            }
        });

        menu1.setBackground(new java.awt.Color(255, 255, 255));
        menu1.setFont(new java.awt.Font("Tekton Pro", 0, 18)); // NOI18N
        menu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu1ActionPerformed(evt);
            }
        });

        num_solo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        num_solo.setText("0");
        num_solo.setEnabled(false);
        num_solo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                num_soloMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                num_soloMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                num_soloMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                num_soloMousePressed(evt);
            }
        });
        num_solo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num_soloActionPerformed(evt);
            }
        });

        num_fries.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        num_fries.setText("0");
        num_fries.setEnabled(false);
        num_fries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num_friesActionPerformed(evt);
            }
        });

        num_spaghetti.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        num_spaghetti.setText("0");
        num_spaghetti.setEnabled(false);
        num_spaghetti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num_spaghettiActionPerformed(evt);
            }
        });

        num_burger.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        num_burger.setText("0");
        num_burger.setEnabled(false);
        num_burger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num_burgerActionPerformed(evt);
            }
        });
        num_burger.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                num_burgerKeyTyped(evt);
            }
        });

        num_set.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        num_set.setText("0");
        num_set.setEnabled(false);
        num_set.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num_setActionPerformed(evt);
            }
        });

        num_mango.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        num_mango.setText("0");
        num_mango.setEnabled(false);
        num_mango.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num_mangoActionPerformed(evt);
            }
        });

        num_palabok.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        num_palabok.setText("0");
        num_palabok.setEnabled(false);
        num_palabok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num_palabokActionPerformed(evt);
            }
        });

        reset.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        reset.setText("RESET");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        btn_total.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btn_total.setText("ORDER");
        btn_total.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_totalActionPerformed(evt);
            }
        });

        menu.setText("Back to menu");
        menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout choiceLayout = new javax.swing.GroupLayout(choice);
        choice.setLayout(choiceLayout);
        choiceLayout.setHorizontalGroup(
            choiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, choiceLayout.createSequentialGroup()
                .addGroup(choiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(choiceLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(choiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(menu7)
                            .addComponent(menu6)
                            .addComponent(menu5)
                            .addComponent(menu4)
                            .addComponent(menu3)
                            .addGroup(choiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(menu1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(menu2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(choiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(num_fries, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                            .addComponent(num_burger)
                            .addComponent(num_spaghetti)
                            .addComponent(num_palabok)
                            .addComponent(num_mango)
                            .addComponent(num_set)
                            .addComponent(num_solo)))
                    .addGroup(choiceLayout.createSequentialGroup()
                        .addContainerGap(176, Short.MAX_VALUE)
                        .addGroup(choiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(menu, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(choiceLayout.createSequentialGroup()
                                .addComponent(reset, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btn_total, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(35, 35, 35))
        );
        choiceLayout.setVerticalGroup(
            choiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(choiceLayout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(choiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(menu1)
                    .addComponent(num_solo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(choiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(menu2)
                    .addComponent(num_fries, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(choiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(choiceLayout.createSequentialGroup()
                        .addComponent(menu3)
                        .addGap(18, 18, 18)
                        .addGroup(choiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(menu4)
                            .addComponent(num_spaghetti, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(num_burger, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(choiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(menu5)
                    .addComponent(num_palabok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(choiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(menu6)
                    .addComponent(num_mango, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(choiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(menu7)
                    .addComponent(num_set, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(choiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_total, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reset, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(menu, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );

        copy.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        copy.setLayout(null);

        txt_total.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_total.setText("0");
        txt_total.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_totalActionPerformed(evt);
            }
        });
        copy.add(txt_total);
        txt_total.setBounds(189, 352, 103, 30);

        jLabel1.setText("TOTAL:");
        copy.add(jLabel1);
        jLabel1.setBounds(120, 362, 36, 20);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Qty", "Order", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setToolTipText("null");
        table.setAutoscrolls(false);
        table.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        table.setGridColor(new java.awt.Color(255, 255, 255));
        table.setRequestFocusEnabled(false);
        table.setShowHorizontalLines(false);
        table.setShowVerticalLines(false);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setMinWidth(50);
            table.getColumnModel().getColumn(0).setPreferredWidth(50);
            table.getColumnModel().getColumn(0).setMaxWidth(50);
            table.getColumnModel().getColumn(1).setResizable(false);
            table.getColumnModel().getColumn(2).setMinWidth(50);
            table.getColumnModel().getColumn(2).setPreferredWidth(50);
            table.getColumnModel().getColumn(2).setMaxWidth(50);
        }

        copy.add(jScrollPane2);
        jScrollPane2.setBounds(30, 30, 250, 240);

        _order.setEnabled(false);
        copy.add(_order);
        _order.setBounds(40, 300, 150, 20);

        delete.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        delete.setText("DELETE");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        copy.add(delete);
        delete.setBounds(200, 290, 80, 30);

        number.setForeground(new java.awt.Color(204, 0, 0));
        number.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        number.setText("Reference No.");
        copy.add(number);
        number.setBounds(190, 390, 100, 14);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(choice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 357, Short.MAX_VALUE)
                        .addComponent(exit))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(copy, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(exit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(copy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(choice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 818, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(818, 535));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private String string;

    /**
     * Get the value of string
     *
     * @return the value of string
     */
    public String getString() {
        return string;
    }

    /**
     * Set the value of string
     *
     * @param string new value of string
     */
    public void setString(String string) {
        this.string = string;
    }
    public static String url = "jdbc:sqlserver://localhost:1433;databaseName=project;user=sa;password=p@ssw0rd";
    public static void add(int total, int qty, String order){
        
        try {
        
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection(url);
            String sql = "INSERT INTO Customer_order([ID],[Customer_order],[Quantity],[Price])"
                    + "VALUES('" + number.getText() + "','"+ order+ "','"+ qty + "','"   +total+"')";
            
            PreparedStatement pst = con.prepareStatement(sql);    
            int rs = pst.executeUpdate();
            
            data();
            con.close();
          
            
             } catch(Exception e)
        {
               JOptionPane.showMessageDialog(null, e);
        }
        try {
        
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection(url);
            String sql = "INSERT INTO show_order([ID],[Customer_order],[Quantity],[Price])"
                    + "VALUES('" + number.getText() + "','"+ order+ "','"+ qty + "','"   +total+"')";
            
            PreparedStatement pst = con.prepareStatement(sql);    
            int rs = pst.executeUpdate();
            
            data();
            con.close();
          
            
             } catch(Exception e)
        {
               JOptionPane.showMessageDialog(null, e);
        }
        
    }
    public static void delete(String Specific_order){
        try {
        
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection(url);
            String sql = "delete Customer_order where Customer_order = '" +Specific_order+ "'";
            PreparedStatement pst = con.prepareStatement(sql);    
            int rs = pst.executeUpdate();
            
            JOptionPane.showMessageDialog(null, "Successfully deleted! \n\n NOTE: Make sure to uncheck your deleted order...");
            data();
             
            con.close();
       
            
             } catch(Exception e)
        {
               JOptionPane.showMessageDialog(null, e);
        }
        try {
        
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection(url);
            String sql = "delete show_order where Customer_order = '" +Specific_order+ "'AND ID = '"+number.getText()+"'";
            PreparedStatement pst = con.prepareStatement(sql);    
            int rs = pst.executeUpdate();
            
            JOptionPane.showMessageDialog(null, "Successfully deleted! \n\n NOTE: Make sure to uncheck your deleted order...");
            data();
             
            con.close();
       
            
             } catch(Exception e)
        {
               JOptionPane.showMessageDialog(null, e);
        }
    }
    

       
    
    public static void data(){
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection(url);
            String sql = "SELECT * FROM Customer_order";
            PreparedStatement pst = con.prepareStatement(sql);    
            ResultSet rs = pst.executeQuery();
            DefaultTableModel model = new DefaultTableModel(new String[]{"Qty","Order","Price"}, 0);
           while(rs.next())
{           {
            String qty_ = rs.getString("Quantity");
           String order_ = rs.getString("Customer_order");
           String price_ = rs.getString("Price");
           
           model.addRow(new Object[]{qty_, order_, price_});
           
           
}           }
           table.setModel(model);
           
            con.close();
            
        } catch(Exception e)
        {
               JOptionPane.showMessageDialog(null, e);
        } 
    }
    public static void wholesale(int total){
        try {
        
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection(url);
            String sql = "INSERT INTO cashier([total])"
                    + "VALUES('"+total+"')";
            
            PreparedStatement pst = con.prepareStatement(sql);    
            int rs = pst.executeUpdate();
            data();
          
             
            
             } catch(Exception e)
        {
               JOptionPane.showMessageDialog(null, e);
        }
       
        
    }
    public static void ref(){
        try {
        
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection(url);
            String sql = "SELECT * FROM receipts INNER JOIN(SELECT MAX(ID) ID FROM receipts )Maxreceipts ON Maxreceipts.ID = receipts.ID";
            PreparedStatement pst = con.prepareStatement(sql);    
            ResultSet rs = pst.executeQuery();
            while(rs.next()){
            int x = Integer.parseInt(rs.getString("ID"));
            int y = x+1;
            number.setText(""+y);
            }
            
             
            con.close();
       
            
             } catch(Exception e)
        {
               JOptionPane.showMessageDialog(null, e);
        }
        
    }
    public static void customer(){
        try {
        
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection(url);
            String sql = "INSERT INTO receipts ([Total])"
                    + "VALUES('" +txt_total.getText()+"')";
            PreparedStatement pst = con.prepareStatement(sql);    
            int rs = pst.executeUpdate();
            
            JOptionPane.showMessageDialog(null, "Successfull");
           
            
            con.close();
          
            
             } catch(Exception e)
        {
    }
    }
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_exitActionPerformed

    private void num_mangoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_num_mangoActionPerformed
        if(num_mango.isEnabled()){
            order = menu6.getText();
            if(order=="Chickenjoy Set of Peach Mango"){
                num = Integer.parseInt(num_mango.getText());
                total = num * 615;
                 qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_solo.setEnabled(false);
                
            }
            else if(order=="Bacon Cheesy Yum with Fries"){
                num = Integer.parseInt(num_mango.getText());
                total = num * 138;
                 qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_solo.setEnabled(false);
            }
            else if(order=="Shanghai w/ Coffee"){
                num = Integer.parseInt(num_mango.getText());
                total = num * 77;
                qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_solo.setEnabled(false);
            }
        }
    }//GEN-LAST:event_num_mangoActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        num_solo.setText(null);
        num_fries.setText(null);
        num_burger.setText(null);
        num_spaghetti.setText(null);
        num_palabok.setText(null);
        num_mango.setText(null);
        num_set.setText(null);
        num_solo.setText(null);
        num_fries.setEnabled(false);
        num_burger.setEnabled(false);
        num_spaghetti.setEnabled(false);
        num_mango.setEnabled(false);
        num_set.setEnabled(false);

        menu1.setSelected(false);
        menu2.setSelected(false);
        menu3.setSelected(false);
        menu4.setSelected(false);
        menu5.setSelected(false);
        menu6.setSelected(false);
        menu7.setSelected(false);

       try {
        
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection(url);
            String sql = "delete Customer_order";
            PreparedStatement pst = con.prepareStatement(sql);    
            int rs = pst.executeUpdate();
            
            JOptionPane.showMessageDialog(null, "Successfully deleted!");
            data();
             
            con.close();
       
            
             } catch(Exception e)
        {
               JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_resetActionPerformed

    private void num_burgerKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_num_burgerKeyTyped
        char num = evt.getKeyChar();
        if (!(Character.isDigit(num))
                || (num == KeyEvent.VK_BACKSPACE)
                || (num == KeyEvent.VK_DELETE)) {
            evt.consume();

        }
    }//GEN-LAST:event_num_burgerKeyTyped

    private void menu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu1ActionPerformed
        Specific_order = menu1.getText();
        if (menu1.isSelected()) {
            num_solo.setEnabled(true);
            num_solo.requestFocus();
            num_solo.setText("");
            
        } else {
            num_solo.setEnabled(false);
            delete(Specific_order);
            num_solo.setText(null);
        }
    }//GEN-LAST:event_menu1ActionPerformed

    private void menu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu2ActionPerformed
        Specific_order = menu2.getText();
        if (menu2.isSelected()) {
            num_fries.setEnabled(true);
            num_fries.requestFocus();
            num_fries.setText("");
            
        } else {
            num_fries.setEnabled(false);            delete(Specific_order);
            num_fries.setText(null);
        }
    }//GEN-LAST:event_menu2ActionPerformed

    private void menu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu3ActionPerformed
        Specific_order = menu3.getText();
        if (menu3.isSelected()) {
            num_burger.setEnabled(true);
            num_burger.requestFocus();
            num_burger.setText("");
            
        } else {
            num_burger.setEnabled(false);            delete(Specific_order);
            num_burger.setText(null);
        }
    }//GEN-LAST:event_menu3ActionPerformed

    private void menu4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu4ActionPerformed
        Specific_order = menu4.getText();
        if (menu4.isSelected()) {
            num_spaghetti.setEnabled(true);
            num_spaghetti.requestFocus();
            num_spaghetti.setText("");
        } else {
            num_spaghetti.setEnabled(false);            delete(Specific_order);
            num_spaghetti.setText(null);
        }
    }//GEN-LAST:event_menu4ActionPerformed

    private void menu5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu5ActionPerformed
        Specific_order = menu5.getText();
        if (menu5.isSelected()) {
            num_palabok.setEnabled(true);
            num_palabok.requestFocus();
            num_palabok.setText("");
        } else {
            num_palabok.setEnabled(false);            delete(Specific_order);
            num_palabok.setText(null);
        }
    }//GEN-LAST:event_menu5ActionPerformed

    private void menu6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu6ActionPerformed
        Specific_order = menu6.getText();
        if (menu6.isSelected()) {
            num_mango.setEnabled(true);
            num_mango.requestFocus();
            num_mango.setText("");
        } else {
            num_mango.setEnabled(false);            delete(Specific_order);
            num_mango.setText(null);
        }
    }//GEN-LAST:event_menu6ActionPerformed

    private void menu7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu7ActionPerformed
        Specific_order = menu7.getText();
        if (menu7.isSelected()) {
            num_set.setEnabled(true);
            num_set.requestFocus();
            num_set.setText("");
        } else {
            num_set.setEnabled(false);
            delete(Specific_order);
            num_set.setText(null);
        }
    }//GEN-LAST:event_menu7ActionPerformed

    private void menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuActionPerformed
        this.dispose();
        new Order().setVisible(true);
        
    }//GEN-LAST:event_menuActionPerformed

    private void num_soloMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_num_soloMouseEntered
        
    }//GEN-LAST:event_num_soloMouseEntered

    private void num_soloMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_num_soloMouseExited
       
    }//GEN-LAST:event_num_soloMouseExited

    private void num_soloMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_num_soloMouseClicked
        
    }//GEN-LAST:event_num_soloMouseClicked

    private void num_soloMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_num_soloMousePressed
         num_solo.getText();
      
    }//GEN-LAST:event_num_soloMousePressed

    private void num_soloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_num_soloActionPerformed

        if(num_solo.isEnabled()){
            order = menu1.getText();
            if(order=="Chickenjoy Solo"){
                num = Integer.parseInt(num_solo.getText());
                total = num * 84;
                qty = num;
                _order.setText(qty +" "+ order);
                
                add(total, qty, order);                num_solo.setEnabled(false);
                num_solo.setEnabled(false);
               
            }
            else if(order=="Yumburger Solo"){
                num = Integer.parseInt(num_solo.getText());
                total = num * 39;
               qty = num;                _order.setText(qty +" "+ order);
               
                add(total, qty, order);                num_solo.setEnabled(false);
            }
            else if(order=="Spaghetti Solo"){
                num = Integer.parseInt(num_solo.getText());
                total = num * 55;
                qty = num;                _order.setText(qty +" "+ order);
                
                add(total, qty, order);                num_solo.setEnabled(false);
            }
            else if(order=="Burger Steak Solo"){
                num = Integer.parseInt(num_solo.getText());
                total = num * 55;
                qty = num;                _order.setText(qty +" "+ order);
                
                add(total, qty, order);                num_solo.setEnabled(false);
            }
            else if(order=="Chickenjoy with Coffee"){
                num = Integer.parseInt(num_solo.getText());
                total = num * 124;
                qty = num;                _order.setText(qty +" "+ order);
                
                add(total, qty, order);                num_solo.setEnabled(false);
            }
            else if(order=="Jolly Crispy Fries-Jumbo"){
                num = Integer.parseInt(num_solo.getText());
                total = num * 80;
                qty = num;                _order.setText(qty +" "+ order);
                
                add(total, qty, order);                num_solo.setEnabled(false);
            }
        }
            
        
    }//GEN-LAST:event_num_soloActionPerformed

    private void num_friesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_num_friesActionPerformed
        if(num_fries.isEnabled()){
            order = menu2.getText();
            if(order=="Chickenjoy w/ Spaghetti"){
                num = Integer.parseInt(num_fries.getText());
                total = num * 109;
               qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_fries.setEnabled(false);
            }
            else if(order=="Cheesy Deluxe Yumburger"){
                num = Integer.parseInt(num_fries.getText());
                total = num * 77;
                qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_fries.setEnabled(false);
            }
            else if(order=="Spaghetti w/ Cheezy YumBurger"){
                num = Integer.parseInt(num_fries.getText());
                total = num * 110;
                qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_fries.setEnabled(false);
            }
            else if(order=="Burger Steak Supreme w/ Fries"){
                num = Integer.parseInt(num_fries.getText());
                total = num * 103;
                qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_fries.setEnabled(false);
            }
            else if(order=="Burger Steak with Coffee"){
                num = Integer.parseInt(num_fries.getText());
                total = num * 97;
               qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_fries.setEnabled(false);
            }
            else if(order=="Jolly Crispy Fries-Large"){
                num = Integer.parseInt(num_fries.getText());
                total = num * 66;
                qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_fries.setEnabled(false);
            }
        }
    }//GEN-LAST:event_num_friesActionPerformed

    private void num_burgerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_num_burgerActionPerformed
        if(num_burger.isEnabled()){
            order = menu3.getText();
            if(order=="Chickenjoy w/ Burger Steak"){
                num = Integer.parseInt(num_burger.getText());
                total = num * 132;
               qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_burger.setEnabled(false);
            }
            else if(order=="Bacon Cheesy Yumburger"){
                num = Integer.parseInt(num_burger.getText());
                total = num * 65;
               qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_burger.setEnabled(false);
            }
            else if(order=="Spaghetti w/ YumBurger"){
                num = Integer.parseInt(num_burger.getText());
                total = num * 99;
                qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_burger.setEnabled(false);
            }
            else if(order=="Big Burger Steak Supreme"){
                num = Integer.parseInt(num_burger.getText());
                total = num * 154;
               qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_burger.setEnabled(false);
            }
            else if(order=="Corned Beef w/ coffee"){
                num = Integer.parseInt(num_burger.getText());
                total = num * 132;
                qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_burger.setEnabled(false);
            }
            else if(order=="Jolly Crispy Fries-Regular"){
                num = Integer.parseInt(num_burger.getText());
                total = num * 44;
                qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_burger.setEnabled(false);
            }
        }
    }//GEN-LAST:event_num_burgerActionPerformed

    private void num_spaghettiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_num_spaghettiActionPerformed
        if(num_spaghetti.isEnabled()){
            order = menu4.getText();
            if(order=="Chickenjoy w/ Fries"){
                num = Integer.parseInt(num_spaghetti.getText());
                total = num * 109;
               qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_spaghetti.setEnabled(false);
            }
            else if(order=="Champ with Fries"){
                num = Integer.parseInt(num_spaghetti.getText());
                total = num * 196;
               qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_spaghetti.setEnabled(false);
            }
            else if(order=="Spaghetti w/ Fries"){
                num = Integer.parseInt(num_spaghetti.getText());
                total = num * 99;
               qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_spaghetti.setEnabled(false);
            }
            else if(order=="Burger Steak w/ Shanghai"){
                num = Integer.parseInt(num_spaghetti.getText());
                total = num * 109;
                
            }
            else if(order=="Beef tapa w/ coffee"){
                num = Integer.parseInt(num_spaghetti.getText());
                total = num * 132;
               qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_spaghetti.setEnabled(false);
            }
            else if(order=="Butterd Corn"){
                num = Integer.parseInt(num_spaghetti.getText());
                total = num * 36;
                qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_spaghetti.setEnabled(false);
            }
        }
    }//GEN-LAST:event_num_spaghettiActionPerformed

    private void num_palabokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_num_palabokActionPerformed
        if(num_palabok.isEnabled()){
            order = menu5.getText();
            if(order=="Chickenjoy w/ Palabok"){
                num = Integer.parseInt(num_palabok.getText());
                total = num * 171;
                qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_palabok.setEnabled(false);
            }
            else if(order=="Double Bacon Yum w/ Fries"){
                num = Integer.parseInt(num_palabok.getText());
                total = num * 182;
                qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_palabok.setEnabled(false);
            }
            else if(order=="Spaghetti Family fan"){
                num = Integer.parseInt(num_palabok.getText());
                total = num * 220;
               qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_palabok.setEnabled(false);
            }
            else if(order=="Lonnganisa w/ coffee"){
                num = Integer.parseInt(num_palabok.getText());
                total = num * 97;
               qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_palabok.setEnabled(false);
            }
            else if(order=="Creamy Macaroni Soup"){
                num = Integer.parseInt(num_palabok.getText());
                total = num * 44;
               qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_palabok.setEnabled(false);
            }
        }
    }//GEN-LAST:event_num_palabokActionPerformed

    private void num_setActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_num_setActionPerformed
        if(num_set.isEnabled()){
            order = menu7.getText();
            if(order=="6 pc Chickenjoy Solo"){
                num = Integer.parseInt(num_set.getText());
                total = num * 418;
                qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_set.setEnabled(false);
                           }
            else if(order=="Yumburger w/ Fries"){
                num = Integer.parseInt(num_set.getText());
                total = num * 87;
                qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_set.setEnabled(false);
                
            }
            else if(order=="Pancake w/ Coffee"){
                num = Integer.parseInt(num_set.getText());
                total = num * 77;
                qty = num;                _order.setText(qty +" "+ order);
                add(total, qty, order);                num_set.setEnabled(false);
                
            }
        }
    }//GEN-LAST:event_num_setActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int SelectedRowIndex = table.getSelectedRow();
        String a = (model.getValueAt(SelectedRowIndex, 0).toString());
        String b = (model.getValueAt(SelectedRowIndex, 1).toString());
        _order.setText(a+""+b);
        
    }//GEN-LAST:event_tableMouseClicked

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        delete(Specific_order);
    }//GEN-LAST:event_deleteActionPerformed

    private void txt_totalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_totalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_totalActionPerformed

    private void btn_totalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_totalActionPerformed
        
        int sum = 0;
        
           for (int i=0; i < table.getRowCount(); i++)
           {
            sum = sum + Integer.parseInt(table.getValueAt(i, 2).toString());
            }
        txt_total.setText(Integer.toString(sum));
        int response = JOptionPane.showConfirmDialog(this, "Do you want to process your Order?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (response == JOptionPane.YES_OPTION){
            customer();
            JOptionPane.showMessageDialog(this, "Proceed to the cashier for payment");
            
            
            new jframe().setVisible(true);
            this.dispose();
            
        }
        else{
            this.dispose();
        }
    }//GEN-LAST:event_btn_totalActionPerformed
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(receipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(receipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(receipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(receipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new receipt().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JLabel _order;
    private javax.swing.JButton btn_total;
    public static javax.swing.JPanel choice;
    public static javax.swing.JPanel copy;
    public static javax.swing.JButton delete;
    private javax.swing.JButton exit;
    public static javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton menu;
    public static javax.swing.JCheckBox menu1;
    public static javax.swing.JCheckBox menu2;
    public static javax.swing.JCheckBox menu3;
    public static javax.swing.JCheckBox menu4;
    public static javax.swing.JCheckBox menu5;
    public static javax.swing.JCheckBox menu6;
    public static javax.swing.JCheckBox menu7;
    public static javax.swing.JTextField num_burger;
    public static javax.swing.JTextField num_fries;
    public static javax.swing.JTextField num_mango;
    public static javax.swing.JTextField num_palabok;
    public static javax.swing.JTextField num_set;
    public static javax.swing.JTextField num_solo;
    public static javax.swing.JTextField num_spaghetti;
    public static javax.swing.JLabel number;
    private javax.swing.JButton reset;
    public static javax.swing.JTable table;
    public static javax.swing.JTextField txt_total;
    // End of variables declaration//GEN-END:variables

   
}
